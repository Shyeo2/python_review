'''
    1. 퍼셉트론 (perceptron)
        1) 단층 퍼셉트론
            - 가장 단순한 인공신경망 모형
            - 입력 노드와 출력 노드로만 구성
            - AND 또는 OR 연산 : 2개 입력 노드와 1개 출력 노드로 구성되어 학습 가능
                - 학습 : 주어진 데이터로 가중치(w1, w2)와 편향 (b)를 찾는 과정
                    - 신경망이 스스로 가중치를 자동으로 설정해주는 알고리즘이 필요함(학습 알고리즘)
                    - 가중치 변화(조정)
                        - 목표치와 오차를 줄이기 위함
        2) 다층 퍼셉트론
            - 은닉층이 있는 인공신경망
            - XOR 연산 : 은닉층이 최소 1개 이상 필요
        3) 딥러닝은 은닉층이 2개 이상인 인공신경망 모형을 학습하는 것
        4) 은닉층과 출력층
            - 각 입력값을 처리하는 합성함수와 출력으로 보내기 위한 활성화함수로 구성

    2. 역전파(Backpropagation)
        1) 가중치와 편향을 학습하기 위한 방법으로 고안 (1974, 1986)
            - 역전파가 XOR 문제 뿐만 아니라 더 복잡한 문제도 해결할 수 있음이 증명됨 → 인공신경망 다시 관심 시작
        2) 신경망의 오차(예측값과 실제값의 차이)를 출력층에서 입력층으로 거꾸로 전파시켜 각 층 (layer)의 가중치와 편향을 업데이트함
        3) 신경망이 깊어질수록 학습력이 좋아져야 하는데 기대하는 결과가 나오지 않는 일이 지속적 발생

    3. 딥(Deep) 출현
        1) 2006년, 가중치의 초기값을 제대로 설정하면 깊이가 깊은 신경망도 학습이 가능하다는 연구를 선보임
        2) 이때부터 인공신경망 대신 '딥(Deep)'이라는 용어를 사용하기 시작
'''
import numpy as np
epsilon = 0.0000001             # 부동소수점 오차를 방지하기 위함

# 퍼셉트론의 활성화 함수
def step_func(t):
    if t > epsilon:
        return 1
    else:
        return 0

# 훈련 데이터 세트
X = np.array([
    [0,0,1],            # 맨 끝의 1은 바이어스 입력신호
    [0,1,1],
    [1,0,1],
    [1,1,1]
])

# 정답을 저장하는 행렬
y = np.array([0,0,0,1])

# 가중치를 저장하는 행렬
# zeros() : 0으로만 채워진 array를 생성

W = np.zeros(len(X[0]))
# print("가중치를 저장하는 행렬" , W)

# 퍼셉트론 학습 알고리즘 구현
def perceptron_fit(X,Y, epochs=10):
    global W
    eta = 0.2       # 학습률

    for t in range(epochs):
        print("epoch=", t, "=========================================================================================")
        for i in range(len(X)):
            # (뉴런 활성화 여부) 출력
            predict = step_func(np.dot(X[i], W))
            error = Y[i] - predict      # 오차 계산 (학습 10번 하면서 오차 변화를 확인하기 위함)
            W += eta * error * X[i]     # 가중치 업데이트
            print("현재 처리 입력 = ", X[i], ", 정답 = ", Y[i], ",출력(뉴런 활성화 여부) = ", predict, ",변경된 가중치 = ", W )
        print("-------------------------------------------------------------------------------------------------------")
perceptron_fit(X, y, 6)





















